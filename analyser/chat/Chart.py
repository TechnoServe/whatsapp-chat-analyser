from turtle import color
import matplotlib.pyplot as plt
from datetime import datetime

from numpy import average
from analyser.models import MessageLog
from analyser.chat.MessageHistory import MessageHistory

import nltk
import itertools
from nltk.corpus import stopwords
from string import punctuation
from nltk.probability import FreqDist
import pandas as pd
from wordcloud import WordCloud
import traceback

msgHistory = MessageHistory()

class Chart:
    def CategoriesOfInformation(data):
        # Pie chart, where the slices will be ordered and plotted counter-clockwise:
        labels = ['Images', 'Messages', 'Links', 'Emojis']
        colours = {'Images': '#f4e61e',
           'Messages': '#00b0af',
           'Links': '#d1e97b',
           'Emojis': '#470f61'}
        
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
        

        fig1, ax1 = plt.subplots(figsize=(8.0, 5.0))

        ax1.pie(data, explode=explode, labels=labels, autopct='%1.1f%%',
                shadow=True, startangle=90, colors=[colours[key] for key in labels])
        ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

        plt.legend(['Images', 'Messages', 'Links', 'Emojis'], loc="lower right")
        # plt.title('Categories of Information Sent', fontsize=48, fontweight='bold')

        plt.savefig("analyser/templates/jinja2/pdf_templates/pie_chart.png")
        plt.clf()
        plt.close()
        return True

    
    def activeDaysChart(data):
        
        fig = plt.figure(figsize=(8.0, 5.5)) 

        # plt.title('Active Days', fontsize=48, fontweight='bold')

        plt.xlabel('Date',fontsize=6, color="#bfbfbf", labelpad=5)
        plt.ylabel('Messages Count', fontsize=10,color="#bfbfbf", labelpad=20)      

        dates = data['dates']
        dates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]

        messages = data['messages']

        plt.bar(dates, messages, color='#00b0af')
        plt.xticks(rotation=80, fontsize=6)

        plt.savefig("analyser/templates/jinja2/pdf_templates/active_days.png")
        plt.clf()
        plt.close('all')

        return True

    
    def wordCloud(chat_file_id):
        print(f"word cloud for {chat_file_id}")

        nltk.download('punkt')
        nltk.download('stopwords')

        qs = MessageLog.objects.filter(chat_file=chat_file_id).values_list('message')
        print(f"messages len {len(qs)}")

        # Creating a pandas dataframe out of the returned results
        df = df = pd.DataFrame(qs, columns=['message'])

        # Performing tokenization here
        df['tokenized'] = df.apply(lambda row: nltk.word_tokenize(row['message']), axis=1)
        listOfWords = df['tokenized'].tolist()
        tokens = list(itertools.chain(*listOfWords))

        # Filtering words from the list of tokens
        stop_words = stopwords.words('english')
        stop_words += ['na','kwa',"'t","one","'s","the","n't",'--']
        punctuation_var = list(punctuation)
        cleaned_tokens = [token for token in tokens if token.lower() not in stop_words and token not in punctuation_var]

        # Frequency of tokens
        fdist = FreqDist(cleaned_tokens)


        myList1 = list(fdist.values())
        newList = sorted(myList1)

        uniqueValues = set(newList)
        uniqueValues = list(uniqueValues)
        #len(uniqueValues)

        length = len(uniqueValues) if len(uniqueValues)%2 == 0 else len(uniqueValues)+1
        length = round(length/2)
        unq = uniqueValues[length :]


        filteredDict = dict()
        # Iterate over all the items in dictionary and filter items which has even keys
        for (key, value) in fdist.items():
        # Check if key is even then add pair to new dictionary
            if fdist[key] in unq and not len(key) == 1:       #newDict[key] = value
                filteredDict[key] = value

        cleaned_tokens_mm = ' '.join(filteredDict)
        print(f"cleaned_tokens_mm {len(cleaned_tokens_mm)}")
        # 
        # TODO (Done) Added try and catch
        # If the chat is so short that it is only having stop words after they are removed the messages stay empty, and wordcloud gives an error
        try:
            wordcloud = WordCloud(width=1800, height=1000, max_font_size=200, background_color="white").generate(cleaned_tokens_mm)
        except ValueError:
            traceback.print_exc()
            # ValueError("We need at least 1 word to plot a word cloud, got 0")
            wordcloud = WordCloud(width=1800, height=1000, max_font_size=200, background_color="white").generate(cleaned_tokens_mm + " None")

        # plt the image generated by WordCloud class
        fig = plt.figure(figsize=(8.0, 5.0)) 
        plt.imshow(wordcloud)
        plt.axis("off")
        plt.savefig("analyser/templates/jinja2/pdf_templates/word_cloud.png")
        plt.clf()
        plt.close('all')

        return True
    

    def emotionsGraph(group_id):
        emotions = msgHistory.getEmotions(group_id)

        fig = plt.figure(figsize=(8.0, 5.0)) 
        emotions_len = len(emotions)
        emotions_list = list(emotions.values())

        # TODO (Done) Modified this line to avoid the error ZeroDivisionError: division by zero
        average = sum(emotions_list)/ (len(emotions_list) or 1)

        col = []
        for val in emotions_list:
            if val < average:
                col.append('#d1e97b')
            elif val >= average:
                col.append('#00b0af')
            else:
                col.append('red')


       
        plt.bar(range(len(emotions)), emotions_list,color = col)

        plt.xticks(range(len(emotions)), list(emotions.keys()))
        plt.xticks(rotation=90)

        plt.savefig("analyser/templates/jinja2/pdf_templates/emotions.png")
        plt.close('all')
        

    def sentimentGraph(group_id):
        sentiment = msgHistory.getSentiment(group_id)
        fig = plt.figure(figsize=(8.0, 5.0)) 
        sentiment_len = len(sentiment)
        sentiment_list = list(sentiment.values())

        # TODO (Done)  Modified this line to avoid the error ZeroDivisionError: division by zero
        average_sentiment = sum(sentiment_list)/ (len(sentiment_list) or 1)
        col = []
        for val in sentiment_list:
            if val < average_sentiment:
                col.append('#d1e97b')
            elif val >= average_sentiment:
                col.append('#00b0af')
            else:
                col.append('red')


       
        plt.bar(range(len(sentiment)), sentiment_list,color = col)

        # plt.bar(range(len(sentiment)), list(sentiment.values()))
        plt.xticks(range(len(sentiment)), list(sentiment.keys()))

        plt.savefig("analyser/templates/jinja2/pdf_templates/sentiment.png")
        plt.close('all')